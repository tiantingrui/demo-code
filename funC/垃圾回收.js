// 引用计数
const obj = { a: 10 }; // 引用加1
const obj1 = { a: 10}; // 引用加1
const obj = {}; // 引用减1
const obj = null; //引用为0
/* 
1. 声明了一个变量并将一个引用类型的值复制给这个变量，这个引用类型的值的引用次数是1
2. 同一个值又被赋值给另一个变量，这个引用类型值的引用次数加1
3. 当包含这个引用类型值的变量又被赋值成另一个值了，那么这个引用类型值的引用次数减1
4. 当引用次数变成0时，说明没办法访问这个值了
5. 当垃圾收集器下一次运行时，它就会释放引用次数是0的值所占的内存 
*/

// 循环引用
function fn () {
    var objA = {a: 10};
    var objB = {b: 10};
    objA.c = objA;
    objB.d = objB
}

// 标记清除
function a0 () {
    var a = 10; // 被标记进入环境
    var b = 'hello'; // 被标记进入环境
}
foo(); // 执行完毕，a 和 b被标记离开环境，内存被回收
